from unittest import TestCase
import unittest
import code
from numpy.testing import assert_array_almost_equal

class TestSingleSmiles(TestCase):
  def __init__(self, *args, **kwargs):
    super(TestSingleSmiles, self).__init__(*args, **kwargs)
    self.smiles = "C(=O)(c1ccc(OCCCCCC)cc1)CCNc1cc(Cl)ccc1"

  def test_create_2d_descriptors(self):
    expected = [12.23851908401804, 0.11483690383356748, 12.23851908401804, 0.11483690383356748, 0.39561818182615566, 359.89700000000005, 333.689, 359.165206752, 134, 0, 0.16413111039322312, -0.493601051865263, 0.493601051865263, 0.16413111039322312, 1.08, 1.88, 2.6, 35.49569160294244, 10.086022001724368, 2.0582646879948197, -2.079527662292188, 2.162136447059745, -2.0852941949291264, 6.3037143804070315, 0.09862911735990329, 1.7204043815692474, 655.2005547564311, 17.90756662611944, 14.763010675759796, 15.518939621778252, 12.185871848001627, 8.942853634028223, 9.32081810703745, 6.0437996583308875, 6.480235438802873, 3.948714981234261, 4.183812084022, 2.519059240803414, 2.7093470889426143, -1.9999999999999996, 443989.51769931015, 19.32638888888889, 10.78, 7.183673469387755, 154.90117209517084, 10.05365155780638, 5.749511833283905, 5.783244946364939, 0.0, 0.0, 0.0, 4.794537184071822, 0.0, 0.0, 0.0, 43.85350902716278, 48.88539110215728, 29.23904910896047, 6.606881964512918, 9.53140013787187, 23.071571111281017, 0.0, 0.0, 0.0, 39.02784531432067, 18.468426974431825, 59.1170213531312, 0.0, 5.749511833283905, 10.05365155780638, 5.687386274683562, 5.749511833283905, 11.600939890232516, 18.934883316790433, 0.0, 0.0, 49.385833990089495, 48.53093654769288, 5.022633313741326, 0.0, 0.0, 38.33, 0.0, 4.794537184071822, 0.0, 5.783244946364939, 23.551662834276907, 24.464601695406394, 19.26246486877803, 0.0, 48.53093654769288, 12.240525803696954, 16.337802844032566, 5.701333950194673, 5.939271940511546, 12.23851908401804, 3.894218294378238, 1.6373592613606018, 0.9390044027507961, 14.904324152019418, 5.183654498357031, 3.506758860854098, 0.0, 0.38095238095238093, 25, 1, 3, 0, 0, 0, 2, 0, 2, 3, 1, 4, 11, 0, 0, 0, 2, 5.984000000000005, 104.96820000000004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]
    output = code.create_2d_descriptors(self.smiles)

    # 順序の影響を無くすためにソートする
    output = sorted(output)     
    expected = sorted(expected)
    self.assertEqual(len(output), len(expected),
                      msg='課題4-2, create_2d_descriptors()の出力が正しくありません。特徴量の数が異なっています。')
    assert_array_almost_equal(output, expected, decimal=2,
                              err_msg='課題4-2, create_2d_descriptors()の出力が正しくありません。')

class TestPrediction(TestCase):
  def __init__(self, *args, **kwargs):
    super(TestPrediction, self).__init__(*args, **kwargs)
    self.filepath = "data/fukunishi_data.csv"

  def test_predict_logpapp(self):
    expected = [-5.31, -5.97, -6.19, -4.46, -5.5, -6.53, -3.22, -4.7, -5.19, -6.07, -5.16, -7.55, -5.54, -3.62, -5.51, -5.22, -5.72, -5.98, -2.84, -5.41, -5.89, -4.67, -5.16, -6.02, -6.2, -5.66, -5.37, -5.37, -3.31, -5.83, -6.55, -3.38, -5.61, -5.59, -3.31, -3.67, -4.73, -6.22, -6.33, -5.75, -5.46, -5.64, -5.69, -3.22, -5.28, -5.35, -5.6, -5.69, -4.28, -5.58, -5.82, -5.81, -3.05, -6.06, -6.66, -7.55, -5.75, -5.47, -6.18, -6.14, -4.46, -5.87, -5.61, -4.77, -6.78, -6.96, -4.25, -5.48, -3.32, -5.41, -6.05, -3.24, -3.98, -5.83, -5.46, -6.51, -6.22, -5.55, -5.48, -5.57, -7.63, -5.23, -6.2, -5.55, -5.65, -4.47, -6.02, -5.78, -6.21, -4.67, -5.56, -3.79, -4.94, -4.9]
    output = code.predict_logpapp(self.filepath)
    assert_array_almost_equal(output, expected, decimal=2,
                              err_msg='課題4-3, predict_logpapp()の出力が正しくありません。出力結果が毎回異なるようであれば、random_state=0、np.random.seed(0)の設定を確認してください。')

  def test_grid_search(self):
    expected = 0.4447790043945641
    output = code.grid_search(self.filepath)
    self.assertAlmostEqual(output, expected, places=2,
                           msg='課題4-4, grid_search()の出力が正しくありません。')

if __name__ == "__main__":
  unittest.main()